// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/message_types/digital_touch/digital_touch.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:digital_touch.BaseMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BaseMessage {
    // message fields
    // @@protoc_insertion_point(field:digital_touch.BaseMessage.TouchKind)
    pub TouchKind: ::protobuf::EnumOrUnknown<TouchKind>,
    // @@protoc_insertion_point(field:digital_touch.BaseMessage.TouchPayload)
    pub TouchPayload: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:digital_touch.BaseMessage.ID)
    pub ID: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:digital_touch.BaseMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BaseMessage {
    fn default() -> &'a BaseMessage {
        <BaseMessage as ::protobuf::Message>::default_instance()
    }
}

impl BaseMessage {
    pub fn new() -> BaseMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TouchKind",
            |m: &BaseMessage| { &m.TouchKind },
            |m: &mut BaseMessage| { &mut m.TouchKind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TouchPayload",
            |m: &BaseMessage| { &m.TouchPayload },
            |m: &mut BaseMessage| { &mut m.TouchPayload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ID",
            |m: &BaseMessage| { &m.ID },
            |m: &mut BaseMessage| { &mut m.ID },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BaseMessage>(
            "BaseMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BaseMessage {
    const NAME: &'static str = "BaseMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.TouchKind = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.TouchPayload = is.read_bytes()?;
                },
                42 => {
                    self.ID = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.TouchKind != ::protobuf::EnumOrUnknown::new(TouchKind::Unknown) {
            my_size += ::protobuf::rt::int32_size(1, self.TouchKind.value());
        }
        if !self.TouchPayload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.TouchPayload);
        }
        if !self.ID.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.TouchKind != ::protobuf::EnumOrUnknown::new(TouchKind::Unknown) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.TouchKind))?;
        }
        if !self.TouchPayload.is_empty() {
            os.write_bytes(3, &self.TouchPayload)?;
        }
        if !self.ID.is_empty() {
            os.write_string(5, &self.ID)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BaseMessage {
        BaseMessage::new()
    }

    fn clear(&mut self) {
        self.TouchKind = ::protobuf::EnumOrUnknown::new(TouchKind::Unknown);
        self.TouchPayload.clear();
        self.ID.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BaseMessage {
        static instance: BaseMessage = BaseMessage {
            TouchKind: ::protobuf::EnumOrUnknown::from_i32(0),
            TouchPayload: ::std::vec::Vec::new(),
            ID: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BaseMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BaseMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BaseMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:digital_touch.TapMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TapMessage {
    // message fields
    // @@protoc_insertion_point(field:digital_touch.TapMessage.Delays)
    pub Delays: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:digital_touch.TapMessage.Location)
    pub Location: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:digital_touch.TapMessage.Color)
    pub Color: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:digital_touch.TapMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TapMessage {
    fn default() -> &'a TapMessage {
        <TapMessage as ::protobuf::Message>::default_instance()
    }
}

impl TapMessage {
    pub fn new() -> TapMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Delays",
            |m: &TapMessage| { &m.Delays },
            |m: &mut TapMessage| { &mut m.Delays },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Location",
            |m: &TapMessage| { &m.Location },
            |m: &mut TapMessage| { &mut m.Location },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Color",
            |m: &TapMessage| { &m.Color },
            |m: &mut TapMessage| { &mut m.Color },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TapMessage>(
            "TapMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TapMessage {
    const NAME: &'static str = "TapMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.Delays = is.read_bytes()?;
                },
                26 => {
                    self.Location = is.read_bytes()?;
                },
                34 => {
                    self.Color = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Delays.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Delays);
        }
        if !self.Location.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.Location);
        }
        if !self.Color.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.Color);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Delays.is_empty() {
            os.write_bytes(2, &self.Delays)?;
        }
        if !self.Location.is_empty() {
            os.write_bytes(3, &self.Location)?;
        }
        if !self.Color.is_empty() {
            os.write_bytes(4, &self.Color)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TapMessage {
        TapMessage::new()
    }

    fn clear(&mut self) {
        self.Delays.clear();
        self.Location.clear();
        self.Color.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TapMessage {
        static instance: TapMessage = TapMessage {
            Delays: ::std::vec::Vec::new(),
            Location: ::std::vec::Vec::new(),
            Color: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TapMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TapMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TapMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TapMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:digital_touch.SketchMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SketchMessage {
    // message fields
    // @@protoc_insertion_point(field:digital_touch.SketchMessage.StrokesCount)
    pub StrokesCount: i64,
    // @@protoc_insertion_point(field:digital_touch.SketchMessage.Strokes)
    pub Strokes: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:digital_touch.SketchMessage.Colors)
    pub Colors: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:digital_touch.SketchMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SketchMessage {
    fn default() -> &'a SketchMessage {
        <SketchMessage as ::protobuf::Message>::default_instance()
    }
}

impl SketchMessage {
    pub fn new() -> SketchMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "StrokesCount",
            |m: &SketchMessage| { &m.StrokesCount },
            |m: &mut SketchMessage| { &mut m.StrokesCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Strokes",
            |m: &SketchMessage| { &m.Strokes },
            |m: &mut SketchMessage| { &mut m.Strokes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Colors",
            |m: &SketchMessage| { &m.Colors },
            |m: &mut SketchMessage| { &mut m.Colors },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SketchMessage>(
            "SketchMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SketchMessage {
    const NAME: &'static str = "SketchMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.StrokesCount = is.read_int64()?;
                },
                18 => {
                    self.Strokes = is.read_bytes()?;
                },
                26 => {
                    self.Colors = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.StrokesCount != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.StrokesCount);
        }
        if !self.Strokes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Strokes);
        }
        if !self.Colors.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.Colors);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.StrokesCount != 0 {
            os.write_int64(1, self.StrokesCount)?;
        }
        if !self.Strokes.is_empty() {
            os.write_bytes(2, &self.Strokes)?;
        }
        if !self.Colors.is_empty() {
            os.write_bytes(3, &self.Colors)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SketchMessage {
        SketchMessage::new()
    }

    fn clear(&mut self) {
        self.StrokesCount = 0;
        self.Strokes.clear();
        self.Colors.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SketchMessage {
        static instance: SketchMessage = SketchMessage {
            StrokesCount: 0,
            Strokes: ::std::vec::Vec::new(),
            Colors: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SketchMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SketchMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SketchMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SketchMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:digital_touch.KissMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KissMessage {
    // message fields
    // @@protoc_insertion_point(field:digital_touch.KissMessage.Delays)
    pub Delays: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:digital_touch.KissMessage.Points)
    pub Points: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:digital_touch.KissMessage.Rotations)
    pub Rotations: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:digital_touch.KissMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KissMessage {
    fn default() -> &'a KissMessage {
        <KissMessage as ::protobuf::Message>::default_instance()
    }
}

impl KissMessage {
    pub fn new() -> KissMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Delays",
            |m: &KissMessage| { &m.Delays },
            |m: &mut KissMessage| { &mut m.Delays },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Points",
            |m: &KissMessage| { &m.Points },
            |m: &mut KissMessage| { &mut m.Points },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Rotations",
            |m: &KissMessage| { &m.Rotations },
            |m: &mut KissMessage| { &mut m.Rotations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KissMessage>(
            "KissMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KissMessage {
    const NAME: &'static str = "KissMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Delays = is.read_bytes()?;
                },
                18 => {
                    self.Points = is.read_bytes()?;
                },
                26 => {
                    self.Rotations = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Delays.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Delays);
        }
        if !self.Points.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Points);
        }
        if !self.Rotations.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.Rotations);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Delays.is_empty() {
            os.write_bytes(1, &self.Delays)?;
        }
        if !self.Points.is_empty() {
            os.write_bytes(2, &self.Points)?;
        }
        if !self.Rotations.is_empty() {
            os.write_bytes(3, &self.Rotations)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KissMessage {
        KissMessage::new()
    }

    fn clear(&mut self) {
        self.Delays.clear();
        self.Points.clear();
        self.Rotations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KissMessage {
        static instance: KissMessage = KissMessage {
            Delays: ::std::vec::Vec::new(),
            Points: ::std::vec::Vec::new(),
            Rotations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KissMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KissMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KissMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KissMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:digital_touch.HeartbeatMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HeartbeatMessage {
    // message fields
    // @@protoc_insertion_point(field:digital_touch.HeartbeatMessage.BPM)
    pub BPM: f32,
    // @@protoc_insertion_point(field:digital_touch.HeartbeatMessage.Duration)
    pub Duration: u64,
    // @@protoc_insertion_point(field:digital_touch.HeartbeatMessage.HeartBrokenAt)
    pub HeartBrokenAt: f32,
    // special fields
    // @@protoc_insertion_point(special_field:digital_touch.HeartbeatMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HeartbeatMessage {
    fn default() -> &'a HeartbeatMessage {
        <HeartbeatMessage as ::protobuf::Message>::default_instance()
    }
}

impl HeartbeatMessage {
    pub fn new() -> HeartbeatMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BPM",
            |m: &HeartbeatMessage| { &m.BPM },
            |m: &mut HeartbeatMessage| { &mut m.BPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Duration",
            |m: &HeartbeatMessage| { &m.Duration },
            |m: &mut HeartbeatMessage| { &mut m.Duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HeartBrokenAt",
            |m: &HeartbeatMessage| { &m.HeartBrokenAt },
            |m: &mut HeartbeatMessage| { &mut m.HeartBrokenAt },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeartbeatMessage>(
            "HeartbeatMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HeartbeatMessage {
    const NAME: &'static str = "HeartbeatMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.BPM = is.read_float()?;
                },
                16 => {
                    self.Duration = is.read_uint64()?;
                },
                53 => {
                    self.HeartBrokenAt = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.BPM != 0. {
            my_size += 1 + 4;
        }
        if self.Duration != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.Duration);
        }
        if self.HeartBrokenAt != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.BPM != 0. {
            os.write_float(1, self.BPM)?;
        }
        if self.Duration != 0 {
            os.write_uint64(2, self.Duration)?;
        }
        if self.HeartBrokenAt != 0. {
            os.write_float(6, self.HeartBrokenAt)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HeartbeatMessage {
        HeartbeatMessage::new()
    }

    fn clear(&mut self) {
        self.BPM = 0.;
        self.Duration = 0;
        self.HeartBrokenAt = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HeartbeatMessage {
        static instance: HeartbeatMessage = HeartbeatMessage {
            BPM: 0.,
            Duration: 0,
            HeartBrokenAt: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HeartbeatMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HeartbeatMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HeartbeatMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartbeatMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:digital_touch.FireballMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FireballMessage {
    // message fields
    // @@protoc_insertion_point(field:digital_touch.FireballMessage.Duration)
    pub Duration: f32,
    // @@protoc_insertion_point(field:digital_touch.FireballMessage.StartX)
    pub StartX: f32,
    // @@protoc_insertion_point(field:digital_touch.FireballMessage.StartY)
    pub StartY: f32,
    // @@protoc_insertion_point(field:digital_touch.FireballMessage.Delays)
    pub Delays: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:digital_touch.FireballMessage.Points)
    pub Points: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:digital_touch.FireballMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FireballMessage {
    fn default() -> &'a FireballMessage {
        <FireballMessage as ::protobuf::Message>::default_instance()
    }
}

impl FireballMessage {
    pub fn new() -> FireballMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Duration",
            |m: &FireballMessage| { &m.Duration },
            |m: &mut FireballMessage| { &mut m.Duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "StartX",
            |m: &FireballMessage| { &m.StartX },
            |m: &mut FireballMessage| { &mut m.StartX },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "StartY",
            |m: &FireballMessage| { &m.StartY },
            |m: &mut FireballMessage| { &mut m.StartY },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Delays",
            |m: &FireballMessage| { &m.Delays },
            |m: &mut FireballMessage| { &mut m.Delays },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Points",
            |m: &FireballMessage| { &m.Points },
            |m: &mut FireballMessage| { &mut m.Points },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FireballMessage>(
            "FireballMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FireballMessage {
    const NAME: &'static str = "FireballMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.Duration = is.read_float()?;
                },
                21 => {
                    self.StartX = is.read_float()?;
                },
                29 => {
                    self.StartY = is.read_float()?;
                },
                34 => {
                    self.Delays = is.read_bytes()?;
                },
                42 => {
                    self.Points = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.Duration != 0. {
            my_size += 1 + 4;
        }
        if self.StartX != 0. {
            my_size += 1 + 4;
        }
        if self.StartY != 0. {
            my_size += 1 + 4;
        }
        if !self.Delays.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.Delays);
        }
        if !self.Points.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.Points);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.Duration != 0. {
            os.write_float(1, self.Duration)?;
        }
        if self.StartX != 0. {
            os.write_float(2, self.StartX)?;
        }
        if self.StartY != 0. {
            os.write_float(3, self.StartY)?;
        }
        if !self.Delays.is_empty() {
            os.write_bytes(4, &self.Delays)?;
        }
        if !self.Points.is_empty() {
            os.write_bytes(5, &self.Points)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FireballMessage {
        FireballMessage::new()
    }

    fn clear(&mut self) {
        self.Duration = 0.;
        self.StartX = 0.;
        self.StartY = 0.;
        self.Delays.clear();
        self.Points.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FireballMessage {
        static instance: FireballMessage = FireballMessage {
            Duration: 0.,
            StartX: 0.,
            StartY: 0.,
            Delays: ::std::vec::Vec::new(),
            Points: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FireballMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FireballMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FireballMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FireballMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:digital_touch.TouchKind)
pub enum TouchKind {
    // @@protoc_insertion_point(enum_value:digital_touch.TouchKind.Unknown)
    Unknown = 0,
    // @@protoc_insertion_point(enum_value:digital_touch.TouchKind.Tap)
    Tap = 1,
    // @@protoc_insertion_point(enum_value:digital_touch.TouchKind.Heartbeat)
    Heartbeat = 3,
    // @@protoc_insertion_point(enum_value:digital_touch.TouchKind.Sketch)
    Sketch = 4,
    // @@protoc_insertion_point(enum_value:digital_touch.TouchKind.Kiss)
    Kiss = 7,
    // @@protoc_insertion_point(enum_value:digital_touch.TouchKind.Fireball)
    Fireball = 8,
}

impl ::protobuf::Enum for TouchKind {
    const NAME: &'static str = "TouchKind";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TouchKind> {
        match value {
            0 => ::std::option::Option::Some(TouchKind::Unknown),
            1 => ::std::option::Option::Some(TouchKind::Tap),
            3 => ::std::option::Option::Some(TouchKind::Heartbeat),
            4 => ::std::option::Option::Some(TouchKind::Sketch),
            7 => ::std::option::Option::Some(TouchKind::Kiss),
            8 => ::std::option::Option::Some(TouchKind::Fireball),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<TouchKind> {
        match str {
            "Unknown" => ::std::option::Option::Some(TouchKind::Unknown),
            "Tap" => ::std::option::Option::Some(TouchKind::Tap),
            "Heartbeat" => ::std::option::Option::Some(TouchKind::Heartbeat),
            "Sketch" => ::std::option::Option::Some(TouchKind::Sketch),
            "Kiss" => ::std::option::Option::Some(TouchKind::Kiss),
            "Fireball" => ::std::option::Option::Some(TouchKind::Fireball),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [TouchKind] = &[
        TouchKind::Unknown,
        TouchKind::Tap,
        TouchKind::Heartbeat,
        TouchKind::Sketch,
        TouchKind::Kiss,
        TouchKind::Fireball,
    ];
}

impl ::protobuf::EnumFull for TouchKind {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("TouchKind").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            TouchKind::Unknown => 0,
            TouchKind::Tap => 1,
            TouchKind::Heartbeat => 2,
            TouchKind::Sketch => 3,
            TouchKind::Kiss => 4,
            TouchKind::Fireball => 5,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for TouchKind {
    fn default() -> Self {
        TouchKind::Unknown
    }
}

impl TouchKind {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TouchKind>("TouchKind")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3src/message_types/digital_touch/digital_touch.proto\x12\rdigital_touc\
    h\"y\n\x0bBaseMessage\x126\n\tTouchKind\x18\x01\x20\x01(\x0e2\x18.digita\
    l_touch.TouchKindR\tTouchKind\x12\"\n\x0cTouchPayload\x18\x03\x20\x01(\
    \x0cR\x0cTouchPayload\x12\x0e\n\x02ID\x18\x05\x20\x01(\tR\x02ID\"V\n\nTa\
    pMessage\x12\x16\n\x06Delays\x18\x02\x20\x01(\x0cR\x06Delays\x12\x1a\n\
    \x08Location\x18\x03\x20\x01(\x0cR\x08Location\x12\x14\n\x05Color\x18\
    \x04\x20\x01(\x0cR\x05Color\"e\n\rSketchMessage\x12\"\n\x0cStrokesCount\
    \x18\x01\x20\x01(\x03R\x0cStrokesCount\x12\x18\n\x07Strokes\x18\x02\x20\
    \x01(\x0cR\x07Strokes\x12\x16\n\x06Colors\x18\x03\x20\x01(\x0cR\x06Color\
    s\"[\n\x0bKissMessage\x12\x16\n\x06Delays\x18\x01\x20\x01(\x0cR\x06Delay\
    s\x12\x16\n\x06Points\x18\x02\x20\x01(\x0cR\x06Points\x12\x1c\n\tRotatio\
    ns\x18\x03\x20\x01(\x0cR\tRotations\"f\n\x10HeartbeatMessage\x12\x10\n\
    \x03BPM\x18\x01\x20\x01(\x02R\x03BPM\x12\x1a\n\x08Duration\x18\x02\x20\
    \x01(\x04R\x08Duration\x12$\n\rHeartBrokenAt\x18\x06\x20\x01(\x02R\rHear\
    tBrokenAt\"\x8d\x01\n\x0fFireballMessage\x12\x1a\n\x08Duration\x18\x01\
    \x20\x01(\x02R\x08Duration\x12\x16\n\x06StartX\x18\x02\x20\x01(\x02R\x06\
    StartX\x12\x16\n\x06StartY\x18\x03\x20\x01(\x02R\x06StartY\x12\x16\n\x06\
    Delays\x18\x04\x20\x01(\x0cR\x06Delays\x12\x16\n\x06Points\x18\x05\x20\
    \x01(\x0cR\x06Points*T\n\tTouchKind\x12\x0b\n\x07Unknown\x10\0\x12\x07\n\
    \x03Tap\x10\x01\x12\r\n\tHeartbeat\x10\x03\x12\n\n\x06Sketch\x10\x04\x12\
    \x08\n\x04Kiss\x10\x07\x12\x0c\n\x08Fireball\x10\x08b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(BaseMessage::generated_message_descriptor_data());
            messages.push(TapMessage::generated_message_descriptor_data());
            messages.push(SketchMessage::generated_message_descriptor_data());
            messages.push(KissMessage::generated_message_descriptor_data());
            messages.push(HeartbeatMessage::generated_message_descriptor_data());
            messages.push(FireballMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(TouchKind::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
